/* autogenerated by Processing revision 1283 on 2022-09-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import nervoussystem.obj.*;
import javax.swing.*;
import java.awt.*;
import javax.swing.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class LSystemTrees extends PApplet {



LSystemMath LMath = new LSystemMath();
GUI GUI = new GUI();
GUIFrame frame = new GUIFrame();
int frameNum = 0;
boolean mouseTF = false;
int version = 7;
int fileCount = 0;

 public void setup()//this runs first before the progarm(similar to main)
{
  /* size commented out by preprocessor */;
  
  GUI.setUpWindow(frame, "Tree Generator V0"+version, 50, 50, 300, 260);
}

 public void draw()//this is a loop that draws
{
  //background(62, 115, 17);
background(0); 
fill(50, 255, 50);
stroke(50, 255, 50);
 lights();

if(mouseTF)
{
frameNum = 1;
mouseTF = false;
}
if(frameNum <=5 && frameNum > 0)
{
beginRecord("nervoussystem.obj.OBJExport", "LSystemTree_V0"+version+".0"+ fileCount +".obj");

LMath.newTree(Float.parseFloat(frame.lengthField.getText()), Float.parseFloat(frame.minLengthField.getText()), Float.parseFloat(frame.scalingField.getText()), 
              Integer.parseInt(frame.maxAngleField.getText()), Integer.parseInt(frame.minBranchesField.getText()), Integer.parseInt(frame.maxBranchesField.getText()));

endRecord();
 frameNum++;
 fileCount++;
}
}

 public void mouseClicked()
{
  mouseTF = true;
}



public class GUI
{
  
  public JLabel setUpLabel(JPanel panel, JLabel label, String text, int x, int y, int w, int h)
  {
    label = new JLabel(text);
    label.setBounds(x, y, w, h);
    
    panel.add(label);
    
    return label;
  }
  
  public JTextField setUpTextField(JPanel panel, JTextField field, String text, int x, int y, int w, int h, int alignment, boolean editable)
  {
    field = new JTextField(text);
    field.setBounds(x, y, w, h);
    field.setHorizontalAlignment(alignment);
    panel.add(field);
    field.setEditable(editable);
    
    return field;
  }
  
  public JPanel setUpPanel(JFrame frame, JPanel panel, int x, int y, int w, int h, int r, int g, int b)
  {
    panel.setBounds(x, y, w, h);
    panel.setLayout(null);
    panel.setBackground(new Color(r, g, b));
    panel.setVisible(true);
    
    frame.add(panel);
    return panel;
    
  }
  
  public void setUpWindow(JFrame frame, String title, int x, int y, int w, int h)
  {
    frame.setTitle(title);
    frame.setBounds(x,y,w,h);
    frame.setVisible(true);
    frame.setResizable(false);
    frame.setLayout(null);
  }
}
public class LSystemMath 
{

 public void branch(float h, float minlength, float scaling, float bottomAngle, float topAngle, int minBranchesm, int maxBranches) 
{
  float d = PApplet.parseFloat(PApplet.parseInt(random(h/2, h)));
  // thickness of the branch is mapped to its length
  float sw = map(h, 2, 120, 1, 5);
  strokeWeight(sw);
  // Draw the actual branch
  //line(0, 0, 0, -h);
  float s = h/25;
  beginShape();
  vertex(0, 0, 0);
  vertex(s, 0, 0);
  vertex(s, 0, s);
  vertex(0, 0, s);
  endShape(CLOSE);
  beginShape();
  vertex(0, 0, 0);
  vertex(0, 0, s);
  vertex(0, d, s);
  vertex(0, d, 0);
  endShape(CLOSE);
  beginShape();
  vertex(s, 0, 0);
  vertex(s, 0, s);
  vertex(s, d, s);
  vertex(s, d, 0);
  endShape(CLOSE);
  beginShape();
  vertex(0, 0, 0);
  vertex(s, 0, 0);
  vertex(s, d, 0);
  vertex(0, d, 0);
  endShape(CLOSE);
  beginShape();
  vertex(0, 0, s);
  vertex(s, 0, s);
  vertex(s, d, s);
  vertex(0, d, s);
  endShape(CLOSE);
  beginShape();
  vertex(0, d, 0);
  vertex(s, d, 0);
  vertex(s, d, s);
  vertex(0, d, s);
  endShape(CLOSE);
  // Move along to end
  translate(0, d);

  // Each branch will be 2/3rds the size of the previous one
  h *= scaling;

topAngle /= scaling;
bottomAngle /= scaling;
//scaling *= scaling;
  // All recursive functions must have an exit condition!!!!
  // Here, ours is when the length of the branch is 2 pixels or less
  if (h > minlength)
  {
    // A random number of branches
    int n = PApplet.parseInt(random(minBranchesm, maxBranches));
    for (int i = 0; i < n; i++) {
      // Picking a random angle
      float thetaZ = random(bottomAngle, topAngle);
      float thetaY = random(2*bottomAngle, 2*topAngle);
      pushMatrix();      // Save the current state of transformation (i.e. where are we now)
      rotateZ(thetaZ);     // Rotate by theta
      rotateY(thetaY);     // Rotate by theta
  branch(h, minlength, scaling, bottomAngle, topAngle, minBranchesm, maxBranches);      // Ok, now call myself to branch again
      popMatrix();       // Whenever we get back here, we "pop" in order to restore the previous matrix state
    }
  }
}

 public void newTree(float length, float minlength, float scaling, int maxAngle,int minBranchesm,int maxBranches) 
{

  
  pushMatrix();
  // Start the tree from the bottom of the screen
  // Start the recursive branching!
  //translate(width/2, 0);
  branch(length, minlength, scaling, -radians(maxAngle), radians(maxAngle), minBranchesm, maxBranches);
  float thetaX = random(0, PI);
      rotateX(thetaX);     // Rotate by theta
  popMatrix();
}
}


public class GUIFrame extends JFrame
{
GUI GUI = new GUI();

JPanel inputPanel = new JPanel();

JLabel maxAngleLabel = new JLabel();
public JTextField maxAngleField = new JTextField();
JLabel minLengthLabel = new JLabel();
public JTextField minLengthField = new JTextField();
JLabel lengthLabel = new JLabel();
public JTextField lengthField = new JTextField();
JLabel branchesLabel = new JLabel();
public JTextField minBranchesField = new JTextField();
public JTextField maxBranchesField = new JTextField();
JLabel scalingLabel = new JLabel();
public JTextField scalingField = new JTextField();

GUIFrame()
{
  inputPanel = GUI.setUpPanel(this, inputPanel, 0, 0, 300, 220, 240, 240 ,240);
  
  maxAngleLabel = GUI.setUpLabel(inputPanel, maxAngleLabel, "Max Angle(degrees):", 20, 20, 200, 21);
  maxAngleField = GUI.setUpTextField(inputPanel, maxAngleField, "45", 170, 20, 100, 21, JTextField.RIGHT, true);
  
  minLengthLabel = GUI.setUpLabel(inputPanel, minLengthLabel, "Min Length:", 20, 60, 200, 21);
  minLengthField = GUI.setUpTextField(inputPanel, minLengthField, "2", 170, 60, 100, 21, JTextField.RIGHT, true);
  
  lengthLabel = GUI.setUpLabel(inputPanel, lengthLabel, "Start Length:", 20, 100, 200, 21);
  lengthField = GUI.setUpTextField(inputPanel, lengthField, "120", 170, 100, 100, 21, JTextField.RIGHT, true);
  
  branchesLabel = GUI.setUpLabel(inputPanel, branchesLabel, "Branches(min, max):", 20, 140, 200, 21);
  minBranchesField = GUI.setUpTextField(inputPanel, minBranchesField, "2", 170, 140, 40, 21, JTextField.RIGHT, true);
  maxBranchesField = GUI.setUpTextField(inputPanel, maxBranchesField, "6", 230, 140, 40, 21, JTextField.RIGHT, true);
  
  scalingLabel = GUI.setUpLabel(inputPanel, scalingLabel, "Scaling Factor:", 20, 180, 200, 21);
  scalingField = GUI.setUpTextField(inputPanel, scalingField, ".66f", 170, 180, 100, 21, JTextField.RIGHT, true);
}
}


  public void settings() { size(1000, 500, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "LSystemTrees" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
