/* autogenerated by Processing revision 1283 on 2022-09-20 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import nervoussystem.obj.*;
import javax.swing.*;
import java.awt.*;
import javax.swing.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class LSystemTrees extends PApplet {



LSystemMath LMath = new LSystemMath();
GUI GUI = new GUI();
GUIFrame frame = new GUIFrame();
int frameNum = 0;
boolean mouseTF = false;
int version = 9;
int fileCount = 0;
int renderCount = 0;
 public void setup()
{
  /* size commented out by preprocessor */;
  
  GUI.setUpWindow(frame, "Tree Generator Menu V0"+version, 50, 50, 300, 340);
}

 public void draw()
{
   PFont f = createFont("Arial",20,true);
  textFont(f);
  lights();
  background(0);
  noStroke();
fill(50, 255, 50);

if(mouseTF)
{
frameNum = 1;
mouseTF = false;
}

if(frameNum <= renderCount && frameNum > 0)
{
 fileCount++;
 
OBJExport obj = (OBJExport) createGraphics(width,height,"nervoussystem.obj.OBJExport",".obj files/LSystemTree_V0"+version+".0"+ fileCount +".obj"); 

obj.setColor(true);
obj.beginDraw();
obj.noStroke();
float thetaY = random(0, PI);
obj.rotateY(thetaY);

LMath.newTree(obj, Float.parseFloat(frame.lengthField.getText()), Float.parseFloat(frame.minLengthField.getText()), Float.parseFloat(frame.scalingField.getText()), 
Integer.parseInt(frame.maxAngleField.getText()), Integer.parseInt(frame.minBranchesField.getText()), Integer.parseInt(frame.maxBranchesField.getText()), Float.parseFloat(frame.widthFactorField.getText()));

obj.endDraw();
obj.dispose();
System.gc();

translate(width/2, height);
rotateX(PI);
PShape tree = loadShape(".obj files/LSystemTree_V0"+version+".0"+ fileCount +".obj");
shape(tree);
 frameNum++;
}else
{
  textAlign(CENTER);
  text("Click to begin rendering.",width/2,(height)/3);
  text("Remember: once rendering begins window cannot close until finished.",width/2,(2*height)/3);
}
}

 public void mouseClicked()
{
  mouseTF = true;
  textAlign(CENTER);
  text("Loading...",width/2,(height)/2);
  renderCount = Integer.parseInt(frame.fileCountField.getText());
}



public class GUI
{
  
  public JLabel setUpLabel(JPanel panel, JLabel label, String text, int x, int y, int w, int h)
  {
    label = new JLabel(text);
    label.setBounds(x, y, w, h);
    
    panel.add(label);
    
    return label;
  }
  
  public JTextField setUpTextField(JPanel panel, JTextField field, String text, int x, int y, int w, int h, int alignment, boolean editable)
  {
    field = new JTextField(text);
    field.setBounds(x, y, w, h);
    field.setHorizontalAlignment(alignment);
    panel.add(field);
    field.setEditable(editable);
    
    return field;
  }
  
  public JPanel setUpPanel(JFrame frame, JPanel panel, int x, int y, int w, int h, int r, int g, int b)
  {
    panel.setBounds(x, y, w, h);
    panel.setLayout(null);
    panel.setBackground(new Color(r, g, b));
    panel.setVisible(true);
    
    frame.add(panel);
    return panel;
    
  }
  
  public void setUpWindow(JFrame frame, String title, int x, int y, int w, int h)
  {
    frame.setTitle(title);
    frame.setBounds(x,y,w,h);
    frame.setVisible(true);
    frame.setResizable(false);
    frame.setLayout(null);
    
  }
}
//This code is based off of code made by The Coding Train
//This is the link to the github:
//https://github.com/CodingTrain/Coding-Challenges/blob/main/016_LSystem/Processing/CC_016_LSystem/CC_016_LSystem.pde

public class LSystemMath 
{

 public void branch(PGraphics object, float h, float minlength, float scaling, float bottomAngle, float topAngle, int minBranchesm, int maxBranches, float widthFactor) 
{
  //float d represnts the length of the new branch, it is can be anywhere between h and h/2
  float d = PApplet.parseFloat(PApplet.parseInt(random(h/2, h)));
 
  if(h < minlength*2)
  {
    changeColor(object, "Green");
  }
  else
  {
    changeColor(object, "Brown");
  }
  //float s is h/widthFactor so that the trunk and branches of the tree will always be a 25th of their maximum length
  float s = h/widthFactor;
  object.beginShape();
  object.vertex(0, 0, 0);
  object.vertex(s, 0, 0);
  object.vertex(s, 0, s);
  object.vertex(0, 0, s);
  object.endShape(CLOSE);
  object.beginShape();
  object.vertex(0, 0, 0);
  object.vertex(0, 0, s);
  object.vertex(0, d, s);
  object.vertex(0, d, 0);
  object.endShape(CLOSE);
  object.beginShape();
  object.vertex(s, 0, 0);
  object.vertex(s, 0, s);
  object.vertex(s, d, s);
  object.vertex(s, d, 0);
  object.endShape(CLOSE);
  object.beginShape();
  object.vertex(0, 0, 0);
  object.vertex(s, 0, 0);
  object.vertex(s, d, 0);
  object.vertex(0, d, 0);
  object.endShape(CLOSE);
  object.beginShape();
  object.vertex(0, 0, s);
  object.vertex(s, 0, s);
  object.vertex(s, d, s);
  object.vertex(0, d, s);
  object.endShape(CLOSE);
  object.beginShape();
  object.vertex(0, d, 0);
  object.vertex(s, d, 0);
  object.vertex(s, d, s);
  object.vertex(0, d, s);
  object.endShape(CLOSE);
  object.translate(0, d);

//multiplying h by the scaling facotor lets us make each branch shorter then the last
  h *= scaling;

//dividing  the topAngle and bottomAngle paramiters by the sacling factor allows us to make the range of directions in which new branches can be made to grow
topAngle /= scaling;
bottomAngle /= scaling;
  if (h > minlength)
  {
    int n = PApplet.parseInt(random(minBranchesm, maxBranches));
    for (int i = 0; i < n; i++) {
      float thetaZ = random(bottomAngle, topAngle);//generates random angle for rotation about the z axis
      float thetaX = random(bottomAngle, topAngle);//generates random angle for rotation about the y axis
      object.pushMatrix(); //save current information, this is like the '[' in an L-system axiom
      object.rotateZ(thetaZ);//rotates new branch about the z axis
      object.rotateY(thetaX);//rotates new branch about the y axis
  branch(object, h, minlength, scaling, bottomAngle, topAngle, minBranchesm, maxBranches, widthFactor);
      object.popMatrix(); //reset to older saved information, this is like the ']' in an L-system axiom
    }
  }
}

 public void newTree(PGraphics object, float length, float minlength, float scaling, int maxAngle,int minBranchesm,int maxBranches, float widthFactor) 
{

  
  object.pushMatrix();
  changeColor(object, "Brown");
  branch(object, length, minlength, scaling, -radians(maxAngle), radians(maxAngle), minBranchesm, maxBranches, widthFactor);
  object.popMatrix();
}
}

private void changeColor(PGraphics object,String colour)
{
  switch(colour)
  {
    case "Green":
    fillGreen(object, PApplet.parseInt(random(0, 4)));
    break;
    case "Brown":
    fillBrown(object, PApplet.parseInt(random(0,2)));
    break;
  }
}

private void fillGreen(PGraphics object, int variation)
{
  switch(variation)
   {
     case 0:
     object.fill(34,139,34);
     break;
     case 1:
     object.fill(0,128,0);
     break;
     case 2:
     object.fill(0,100,0);
     break;
     case 3:
     object.fill(46,139,87);
     break;
     case 4:
     object.fill(85,107,47);
     break;
   }
}

private void fillBrown(PGraphics object,int variation)
{
  switch(variation)
   {
     case 0:
     object.fill(89,39,32);
     break;
     case 1:
     object.fill(61,12,2);
     break;
     case 2:
     object.fill(89,39,32);
     break;
   }
}


public class GUIFrame extends JFrame
{
  
 
           
GUI GUI = new GUI();

JPanel inputPanel = new JPanel();

JLabel maxAngleLabel = new JLabel();
public JTextField maxAngleField = new JTextField();
JLabel minLengthLabel = new JLabel();
public JTextField minLengthField = new JTextField();
JLabel lengthLabel = new JLabel();
public JTextField lengthField = new JTextField();
JLabel branchesLabel = new JLabel();
public JTextField minBranchesField = new JTextField();
public JTextField maxBranchesField = new JTextField();
JLabel scalingLabel = new JLabel();
public JTextField scalingField = new JTextField();
JLabel fileCountLabel = new JLabel();
public JTextField fileCountField = new JTextField();
JLabel widthFactorLabel = new JLabel();
public JTextField widthFactorField = new JTextField();
GUIFrame()
{
   addWindowListener(new java.awt.event.WindowAdapter()
   {
            public void windowClosing(java.awt.event.WindowEvent e)
            {
               exit();
            }
   });
        
  inputPanel = GUI.setUpPanel(this, inputPanel, 0, 0, 300, 220, 240, 240 ,240);
  
  maxAngleLabel = GUI.setUpLabel(inputPanel, maxAngleLabel, "Max Angle(degrees):", 20, 20, 200, 21);
  maxAngleField = GUI.setUpTextField(inputPanel, maxAngleField, "45", 170, 20, 100, 21, JTextField.RIGHT, true);
  
  minLengthLabel = GUI.setUpLabel(inputPanel, minLengthLabel, "Min Length:", 20, 60, 200, 21);
  minLengthField = GUI.setUpTextField(inputPanel, minLengthField, "4", 170, 60, 100, 21, JTextField.RIGHT, true);
  
  lengthLabel = GUI.setUpLabel(inputPanel, lengthLabel, "Start Length:", 20, 100, 200, 21);
  lengthField = GUI.setUpTextField(inputPanel, lengthField, "120", 170, 100, 100, 21, JTextField.RIGHT, true);
  
  branchesLabel = GUI.setUpLabel(inputPanel, branchesLabel, "Branches(min, max):", 20, 140, 200, 21);
  minBranchesField = GUI.setUpTextField(inputPanel, minBranchesField, "2", 170, 140, 40, 21, JTextField.RIGHT, true);
  maxBranchesField = GUI.setUpTextField(inputPanel, maxBranchesField, "4", 230, 140, 40, 21, JTextField.RIGHT, true);
  
  scalingLabel = GUI.setUpLabel(inputPanel, scalingLabel, "Scaling Factor:", 20, 180, 200, 21);
  scalingField = GUI.setUpTextField(inputPanel, scalingField, ".75", 170, 180, 100, 21, JTextField.RIGHT, true);
  
  fileCountLabel = GUI.setUpLabel(inputPanel, fileCountLabel, "Render Count:", 20, 220, 200, 21);
  fileCountField = GUI.setUpTextField(inputPanel, fileCountField, "5", 170, 220, 100, 21, JTextField.RIGHT, true);
  
  widthFactorLabel = GUI.setUpLabel(inputPanel, widthFactorLabel, "Width Factor:", 20, 260, 200, 21);
  widthFactorField = GUI.setUpTextField(inputPanel, widthFactorField, "20", 170, 260, 100, 21, JTextField.RIGHT, true);
}
}


  public void settings() { size(1000, 500, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "LSystemTrees" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
